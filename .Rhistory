library(remotes)
library(devtools)
getwd
getwd()
## can also use devtools to build the package
build("mywinratio_test")
install("mywinratio_1.0.tar.gz", dependencies = TRUE)
getwd()
install("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/mypackages/mywinratio_1.0.tar.gz"
, dependencies = TRUE)
rm(list=ls()); set.seed(126);
library(MASS)
library("randomizeR")
library(MCMCpack)
library(dplyr)
library(survival)
library(foreach)
library(parallel)
library(doParallel)
library(tidyr)
library(profvis)
library(Rcpp)
library(RcppArmadillo)
library(RcppDist)
library(mywinratio)
est_cens_time = function(fit,n){
Cens.generated = as.numeric(quantile(fit, probs = runif(n) )$quantile)
Cens.generated[is.na(Cens.generated)] = Inf # replace NAs with Inf
return (Cens.generated)
}
OCC.Table<- function(N.sim = 2,
N.max = 100,
mu.trt = c(log(2), log(5)),
Sigma.trt = matrix(c(1, 0.5, 0.5, 1), ncol=2),
mu.ctrl= c(log(2), log(5)),
Sigma.ctrl = matrix(c(1, 0.5, 0.5, 1), ncol=2),
cens_upper = 20,
cohort = c(40,60,80,100),
recruit.int  = 0.25,
m0 = c(0,0),
k0 = 0.001,
v0 = 4,
S0 = diag(0.001, 2),
time_max = 20,
M_iter = 10,
eta = 1,
lambda = 0.25
){
### simulate the data for a given mu, sigma2, rho;
myData<-array(dim=c(N.max,7,N.sim));
for (j in 1:N.sim){
# Generate a randomization list
params <- crPar(N.max)
rs <- genSeq(params)
rand <- as.character(getRandList(rs))
# simulate log time to recurrence,time to death
trt.events <- 	as.data.frame(mvrnorm(sum(rand=="A"),
mu= mu.trt,
Sigma= Sigma.trt))
trt.events$id =  which(rand=="A");trt.events$grp = 1;
#trt.events$mu1 = mu.trt[1]; trt.events$mu2 = mu.trt[2];
#trt.events$var1 = Sigma.trt[1,1];   trt.events$var2 = Sigma.trt[2,2];   trt.events$rho = cov2cor(Sigma.trt)[1,2]
# time to recurrence and death from treatment group
ctrl.events <- 	as.data.frame(mvrnorm(sum(rand=="B"),
mu= mu.trt,
Sigma= Sigma.trt))
ctrl.events$id =  which(rand=="B");ctrl.events$grp = 0
# simulate time to censor
time.censor = runif(N.max, 0, cens_upper);
eventsall = rbind(trt.events, ctrl.events); eventsall = eventsall[order(eventsall$id),]
myData[,1,j]<- exp(eventsall[,1])                 # time to recurrence
myData[,2,j]<- exp(eventsall[,2])                      # time to death
myData[,3,j]<- time.censor
myData[,4,j]<- eventsall[,4]                      # treatment group assnments
myData[,5,j]<-  eventsall[,3]                     # id
}
# Create dimension names
dim_names <- list(
NULL,
Variables = c("recurrence_t", "death_t", "censor_t", "group", "id", "delta1", "delta2"),
Simulations = paste("Simulation", 1:N.sim)
)
# Assign the dimension names to the array
dimnames(myData) <- dim_names
stop.all<-stop.early <-pts.all <-rep(0, N.sim);
library(foreach)
library(doParallel)
# Set the number of cores you want to use
num_cores <- 4  # Adjust this to the number of available cores
# Initialize parallel processing
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Parallelize simulations
required_packages <- c("MASS", "randomizeR" ,"MCMCpack" , "dplyr", "survival", "tidyr",
"Rcpp", "RcppArmadillo", "RcppDist", "mywinratio")
foreach(i.sim = 1:N.sim, .combine = "list", .packages = required_packages) %dopar% {
Time.entry <-Time.current <-n.current <-j.cohort<-0;
trial.stop<- trialER.stop<-pts.stop<-  0;
winratio = function(currentdd = currentData,
n_current = n.current,
Time_current = Time.current,
Time_entry = Time.entry,
m0 = c(0,0),
k0 = 0.001,
v0 = 4,
S0 = diag(0.001, 2),
time_max = 20,
M_iter = 5000,
eta = 1,
lambda = 0.25,
N.max = 100){
# update actual censoring time at this interim look
currentdd[,3] = pmin(Time_current-Time_entry[-n_current], currentdd[,3])
currentdd[,6] <- as.integer(currentdd[,1] <= pmin(currentdd[,3],currentdd[,2]))
currentdd[,7] <-  as.integer(currentdd[,2] <= currentdd[,3])
# update recurrence and death  and the censoring time to reflect the observed data at this interim look
currentdd[,1] = ifelse(currentdd[,6]==1, currentdd[,1], NA)
currentdd[,3]  = pmin(currentdd[,2] , currentdd[,3] )
currentdd[,2] = ifelse(currentdd[,7]==1, currentdd[,2], NA)
# number enrolled to each group
n.current.trt = sum(currentdd[,4])
n.current.ctrl =  n_current - 1 - n.current.trt
# separate data to trt and control
currentData.trt = currentdd[currentdd[,4]==1,]
currentData.ctrl = currentdd[currentdd[,4]==0,]
# Step 1:Update posterior theta
trt.post = mywinratio::update_theta(N_iter = 10000, dd = currentData.trt,
n = n.current.trt, k0 = k0, m0 = m0, S0 = S0, v0 = v0,
time_max = time_max)
ctrl.post = mywinratio::update_theta(N_iter = 10000, dd = currentData.ctrl,
n = n.current.ctrl,k0 = k0, m0 = m0, S0 = S0, v0 = v0,
time_max = time_max)
# Step 2: estimating censoring distribution
trt_cens.est = survfit(Surv(currentData.trt[,"censor_t"], 1 - currentData.trt[,"delta2"]) ~ 1 )
ctrl_cens.est =survfit(Surv(currentData.ctrl[,"censor_t"], 1 - currentData.ctrl[,"delta2"]) ~ 1 )
# Step 3: sample R and D for each group, and generate censoring time for each patient
### initialize posterior data
postData <-array(dim=c(n_current-1,6,M_iter));
# Create dimension names
dim_names <- list(
NULL,
Variables = c("R", "D", "C", "group",  "delta1", "delta2"),
Iterations = paste("Iteration", 1:M_iter)
)
# Assign the dimension names to the array
dimnames(postData) <- dim_names
postData[1:n.current.trt,1:2,] = trt.post$post_data[,,(10000-M_iter+1):10000]
postData[(n.current.trt+1):(n_current-1),1:2,] = ctrl.post$post_data[,,(10000-M_iter+1):10000]
res1 = replicate(M_iter, est_cens_time(trt_cens.est,n.current.trt), simplify = F)
res2 = replicate(M_iter, est_cens_time(ctrl_cens.est, n.current.ctrl), simplify = F)
postData[1:n.current.trt,3,]  = matrix(unlist(res1), nrow = n.current.trt, ncol = M_iter, byrow = F)
postData[(n.current.trt+1):(n_current-1),3,] =  matrix(unlist(res2), nrow = n.current.ctrl, ncol = M_iter, byrow = F)
postData[1:n.current.trt,4,] = 1
postData[(n.current.trt+1):(n_current-1),4,] = 0
postData[, 5,] <- as.integer(postData[, 1,] <= pmin(postData[, 2,], postData[, 3,]))
postData[, 6,] <- as.integer(postData[, 2,] <= postData[, 3,])
postData[, 1,] <- ifelse( postData[, 5,]==1,  postData[, 1,], NA)
postData[, 3,] <- pmin(postData[, 2,], postData[, 3,])
postData[, 2,] <- ifelse( postData[, 6,]==1,  postData[, 2,], NA)
# Step 4: calculate the IPCW-adjusted WR
time.trt <- time.ctrl <- surv.trt <- surv.ctrl <- vector("list", M_iter)
for (j.iter in 1:M_iter){
C = postData[,3,j.iter]
delta2 = postData[,6,j.iter]
R = postData[,1,j.iter]
D = postData[,2,j.iter]
fit.trt = survfit(Surv(C[1:n.current.trt], 1-delta2[1:n.current.trt]) ~ 1)
fit.ctrl = survfit(Surv(C[(n.current.trt+1):(n_current-1)],
1-delta2[(n.current.trt+1):(n_current-1)]) ~ 1)
time.trt[[j.iter]] = summary(fit.trt)$time
time.ctrl[[j.iter]] = summary(fit.ctrl)$time
surv.trt[[j.iter]] = summary(fit.trt)$surv
surv.ctrl[[j.iter]] = summary(fit.ctrl)$surv
}
## getting the survival probability for event times, from the censoring distribution from both groups
## calculate WR
result = mywinratio:: compare(M_iter = M_iter, n_current_ctrl = n.current.ctrl,
n_current_trt = n.current.trt, postData = postData,
time_trt = time.trt, time_ctrl = time.ctrl, surv_trt = surv.trt, surv_ctrl = surv.ctrl)
probs = mean(result$WR > eta, na.rm  = T)
cutoff = ((n.current.trt + n.current.ctrl)/N.max)**lambda
return(list(probs = probs, cutoff = cutoff))
}
while (n.current < N.max &&  trial.stop !=1)
{
j.cohort<-j.cohort+1;
n.current<- cohort[j.cohort];
Time.entry <- recruit.int*(c(1:n.current)-1)        ; ## take into account recruit interver;
Time.current <- recruit.int*(n.current-1)  ;
currentData =  myData[1:n.current-1,,i.sim]
result = winratio(currentdd = currentData,
n_current = n.current,
Time_current = Time.current,
Time_entry = Time.entry,
m0 = m0,
k0 = k0,
v0 = v0,
S0 = S0,
time_max = time_max,
M_iter = M_iter,
eta = eta,
lambda = lambda,
N.max = N.max)
if (result$probs <= result$cutoff) { trial.stop<-1; trialER.stop <-1 }
}
pts.stop<-n.current;
if (pts.stop==N.max) {trialER.stop<-0}
### early stop for the last cohort; trial.stop =1, while not early stoped.
stop.all[i.sim]<-trial.stop;
stop.early[i.sim] <-trialER.stop;
pts.all[i.sim] <-pts.stop;
}
MyRaw <- data.frame(PRN=1-stop.all, PEN=stop.early, EN=pts.all);
mysim1<-(apply(MyRaw,2,mean));
mysim1<- round(mysim1,3);
return(list(mysim1 = mysim1, mu = c(mu.trt,mu.ctrl), Sigma.trt = Sigma.trt, Sigma.ctrl = Sigma.ctrl,
lambda = lambda))
}
OCC.Table(N.sim = 2,
N.max = 100,
mu.trt = c(log(2), log(5)),
Sigma.trt = matrix(c(1, 0.5, 0.5, 1), ncol=2),
mu.ctrl= c(log(2), log(5)),
Sigma.ctrl = matrix(c(1, 0.5, 0.5, 1), ncol=2),
cens_upper = 20,
cohort = c(40,60,80,100),
recruit.int  = 0.25,
m0 = c(0,0),
k0 = 0.001,
v0 = 4,
S0 = diag(0.001, 2),
time_max = 20,
M_iter = 10,
eta = 1,
lambda = 0.25
)
getwd()
result <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_forthetuned_lambda.rds")
result
result_test1 <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_test1.rds")
View(result_test1)
result_test1
result_test <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_test.rds")
result_test
library(test)
?glm
?quantile
vignette("rd")
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test2", example_code = F)
remove.packages("Rcpp")
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test11", example_code = F)
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test12", example_code = F)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, Niter, by = 5)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, 100000, by = 5)
M_iter = length(idxs)
burn_MCMC = as.integer(0.3*50000)
idxs <- seq(burn_MCMC, 50000, by = 5)
M_iter = length(idxs)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, 100000, by = 5)
M_iter = length(idxs)
length(c(600,900,1200))
1/0.07
0.01*1000
(900/1262)^26
(900/1262)^27
1/7000
1/15000
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("BayesianWinRatio", example_code = F)
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("tAUC-CR", example_code = F)
RcppArmadillo::RcppArmadillo.package.skeleton("tAUC_CR", example_code = F)
RcppArmadillo::RcppArmadillo.package.skeleton("tAUCCR", example_code = F)
load("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/mypackages/tAUCCR/data/demo.rda")
View(outcome)
View(outcome)
outcome[[1]]
load("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/mypackages/tAUCCR/data/demo.rda")
load("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/mypackages/tAUCCR/data/demo.rda")
load("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/mypackages/tAUCCR/data/demo.rda")
View(demo)
View(demo)
conditions <- enquos(bpi == bpl, DRUGi == DRUGl, GENDERi == GENDERl)
library(rlang)
conditions <- enquos(bpi == bpl, DRUGi == DRUGl, GENDERi == GENDERl)
squared_diffs <- vector("list", length(var_pairs))
var_pairs = list(
age = c("agei", "agel"),
bmi = c("bmii", "bmil"))
squared_diffs <- vector("list", length(var_pairs))
View(squared_diffs)
names(squared_diffs) <- names(var_pairs)
for (var in names(var_pairs)) {
pair <- var_pairs[[var]]
squared_diffs[[var]] <- paste0("(", pair[1], " - ", pair[2], ")^2")
}
sum_of_squares_expr <- paste(squared_diffs, collapse = " + ")
final_expr <- paste0("sqrt(", sum_of_squares_expr, ")")
final_expr
cont_vars =  c("age", "bmi")
# Assume `cont_vars` is a vector of continuous variable names, e.g., cont_vars <- c("age", "bmi")
squared_diffs <- vector("list", length(cont_vars))
View(squared_diffs)
# Name each element in squared_diffs by the variable name
names(squared_diffs) <- cont_vars
View(squared_diffs)
# Loop over each variable name in cont_vars and create the squared difference expression
for (var in cont_vars) {
# Create case and control versions by appending "i" and "l" to the variable name
case_var <- paste0(var, "i")
control_var <- paste0(var, "l")
# Store the squared difference expression
squared_diffs[[var]] <- paste0("(", case_var, " - ", control_var, ")^2")
}
# Create the final expression for the sum of squares
sum_of_squares_expr <- paste(squared_diffs, collapse = " + ")
final_expr <- paste0("sqrt(", sum_of_squares_expr, ")")
# final_expr now contains the full expression
final_expr
discrete_vars = c("bpi", "DRUG", "GENDER")
conditions <- lapply(discrete_vars, function(var) {
paste0(var, "i == ", var, "l")
})
View(conditions)
discrete_vars = c("bp", "DRUG", "GENDER")
conditions <- lapply(discrete_vars, function(var) {
paste0(var, "i == ", var, "l")
})
conditions_expr <- paste(conditions, collapse = " & ")
conditions_expr
eval(parse(text = conditions_expr))
text
conditions <- lapply(discrete_vars, function(var) {
sym_case <- sym(paste0(var, "i"))
sym_control <- sym(paste0(var, "l"))
expr(!!sym_case == !!sym_control)
})
conditions
nx<-ncol(vxs)
n = nrow(data); vt = Y0 vc =  C0;  vn = M0; vxs =  VXS; eta = 1, c0 = 1
n = nrow(data); vt = Y0 vc =  C0;  vn = M0; vxs =  VXS; eta = 1; c0 = 1
n = nrow(data); vt = Y0; vc =  C0;  vn = M0; vxs =  VXS; eta = 1; c0 = 1
vt
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"))
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"))
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"), force = T)
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"))
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"))
library(tAUCCR)
dd = tAUCCR::demo
# obtain the arguments from the demo data
n = nrow(dd)
Y0 = dd$Y
C0 = dd$delta
M0 = dd$M
VXS = dd[,c("xd","xc")]
c0 = 2
cont_vars = c("xc")
discrete_vars = c("xd")
dd_crossed1 = data_crossingdc(n, Y0,C0,M0,VXS,1,2, cont_vars, discrete_vars)
dd_crossed2 = data_crossingdc(n, Y0,C0,M0,VXS,2,2, cont_vars, discrete_vars)
# install if not installed
# install.packages("fastglm")
library(fastglm)
covariates_i <- paste0(c("xd", "xc"), "i")
YI = dd_crossed1$yi
XS<- as.matrix(cbind(int = 1,
t1 = YI^(-2),
t2 = YI^(-1),
t3 = YI^(-0.5),
t4 = log(YI),
t5 = YI^(0.5),
t6 = YI,
t7 = YI^(2),
dd_crossed1[covariates_i]))
YS<-dd_crossed1$Iil
rho01<-dd_crossed1$rho01
rho02<-dd_crossed1$rho02
rhoweight<-dd_crossed1$rhoweight
ordic=dd_crossed1$i-1
ordjc=dd_crossed1$l-1
gc()
outcome <- fastglm(XS,YS,weights = rhoweight,family=binomial(link="logit"),maxit=10000L)
beta.hat = outcome$coefficients
L=covariance_cal_wrapper(beta.hat,M0,rho01,rho02,t(XS),ordic,ordjc)
remove.packages("tAUCCR")
setwd("tAUCCR")
Rcpp::compileAttributes()
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
check() # check the package
library(remotes)
library(devtools)
library(roxygen2)
check() # check the package
devtools::document()  # Rebuild the NAMESPACE file
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/tAUCCR", auth_token = Sys.getenv("GITHUB_PAT"))
library(remotes)
library(devtools)
library(roxygen2)
devtools::build_readme()
library(remotes)
library(devtools)
library(roxygen2)
Rcpp::compileAttributes()
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
